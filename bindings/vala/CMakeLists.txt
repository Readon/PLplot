# bindings/c++/CMakeLists.txt
# Copyright (C) 2006 Andrew Ross
# Copyright (C) 2015-2018 Alan W. Irwin
#
# This file is part of PLplot.
#
# PLplot is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; version 2 of the License.
#
# PLplot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with PLplot; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA

if(ENABLE_vala)

    # pkg_check_pkgconfig(gee
    #     GEE_INCLUDE_DIR GEE_LINK_DIR GEE_LINK_FLAGS GEE_CFLAGS GEE_VERSION)
    # if(NOT GEE_LINK_FLAGS)
    #     message(STATUS "WARNING: pkg-config does not find libgee.")
    # endif(NOT GEE_LINK_FLAGS)

    #include_directories(${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

    set(CFLAGS
        ${GOBJECT_PKG_CFLAGS} ${GOBJECT_PKG_CFLAGS_OTHER}
    )
    add_definitions(${CFLAGS})

    # If someone doesn't specify a build type, default to "Debug"
    if(CMAKE_BUILD_TYPE STREQUAL "")
    set(CMAKE_BUILD_TYPE "Release")
    endif(CMAKE_BUILD_TYPE STREQUAL "")

    list(APPEND VALA_COMPILER_FLAGs_DEBUG "--debug")
    # Lots of perfectly valid Vala code will trigger warnings from the C
    # compiler, almost always false-positives.  This often drowns out
    # legitimate warnings, so we'll try to disable them here.
    include(AddCompilerFlags)
    global_add_compiler_flags(-Wno-incompatible-pointer-types)

    set(vala_LIBS
        ${GLIB}
        ${GOBJECT}
    #	${GEE}
    )
    link_libraries(${vala_LIBS})

    set(vala_LIB_SRCS
        plplot.vala
        plplotc.vapi
        )

    set(vala_INSTALLED_HEADERS
        plplot.vapi
        )

    include_directories(
        ${CMAKE_SOURCE_DIR}/include
        ${CMAKE_BINARY_DIR}
        ${CMAKE_BINARY_DIR}/include
        )

    if(USE_RPATH)
        get_target_property(LIB_INSTALL_RPATH PLPLOT::plplot INSTALL_RPATH)
    endif(USE_RPATH)
    
    #configure_library_build(plplotvala valac "${vala_LIB_SRCS}" PLPLOT::plplot)
    # The name of the shared library.  Note that a "lib" prefix will be
    # added automatically on systems where that is the convention.
    set(vala_LIBRARY_NAME ${PROJECT_NAME}vala)


    # The name of the VAPI to generate, which also needs to be the
    # pkg-config name.  It's often a good idea to make this the same as
    # your shared library name, but not required.  For example, if your
    # project is called "libfoo" you should have your library be named
    # "foo", but use "libfoo" for the package name.
    #
    # For our example, we'll use the project name (which we set at the
    # beginning of the top level CMakeLists.txt.
    set(vala_PKG_NAME ${PROJECT_NAME})

    # Name of the GObject Introspection repository for the library.
    set(vala_GIR_NAME ${PROJECT_NAME}-${PLPLOT_VERSION})

    # The path where libraries files should be searched for
    set (LIBRARY_PATH "plplot")

    # Any dependencies.  Note that it isn't actually necessary to add
    # glib-2.0 or gobject-2.0 (it is done implicitly), but for this
    # template project we don't actually depend on anything else, so we
    # added it for illustrative purposes.
    set(vala_PACKAGES
        glib-2.0
        gobject-2.0)

    # Compile Vala -> C
    vala_precompile_target(
        "${vala_LIBRARY_NAME}-vala"
        vala_C_SOURCES
        PACKAGES ${vala_PACKAGES}
        VAPI "${CMAKE_CURRENT_BINARY_DIR}/${vala_PKG_NAME}.vapi"
        GIR "${vala_GIR_NAME}.gir"
        HEADER "${CMAKE_CURRENT_BINARY_DIR}/${vala_PKG_NAME}.h"
        ${vala_LIB_SRCS})

    # Compile the library.
    #
    # By default, we create and install a shared library.  If you don't
    # want to do that, you can change "SHARED" in the below function call
    # to "STATIC".
    add_library(${vala_LIBRARY_NAME}
        SHARED
        ${vala_C_SOURCES})

    # Make sure the Vala sources are compiled to C before attempting to
    # build the library.
    add_dependencies("${vala_LIBRARY_NAME}" "${vala_LIBRARY_NAME}-vala")
	target_link_libraries(${vala_LIBRARY_NAME} PLPLOT::plplot)

    # Generate a .gitignore
    # file(WRITE  ".gitignore" "# Automatically generated by CMake, do not modify.\n")
    # foreach(file
    #     ".gitignore"
    #     "${CMAKE_SHARED_LIBRARY_PREFIX}${vala_LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}*"
    #     "${CMAKE_STATIC_LIBRARY_PREFIX}${vala_LIBRARY_NAME}${CMAKE_STATIC_LIBRARY_SUFFIX}"
    #     "${CMAKE_SHARED_LIBRARY_PREFIX}${vala_LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}.${MY_PROJECT_VERSION_API}"
    #     "${CMAKE_SHARED_LIBRARY_PREFIX}${vala_LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}.${MY_PROJECT_VERSION_API}.${MY_PROJECT_VERSION_REVISION}"
    #     "${vala_PKG_NAME}.pc")
    #   file(APPEND ".gitignore" "/${file}\n")
    # endforeach(file)
    # foreach(file ${vala_C_SOURCES})
    #   string(REPLACE "${CMAKE_CURRENT_BINARY_DIR}/" "" file ${file})
    #   file(APPEND ".gitignore" "/${file}\n")
    # endforeach(file)

    # Define the gettext domain
    set_property (TARGET ${vala_LIBRARY_NAME}
        APPEND PROPERTY COMPILE_DEFINITIONS GETTEXT_PACKAGE="${GETTEXT_PACKAGE}")

    # Set the library's version information
    set_target_properties (${vala_LIBRARY_NAME} PROPERTIES
        SOVERSION "${PLPLOT_VERSION}"
        VERSION   "${PLPLOT_VERSION_MAJOR}.${PLPLOT_VERSION_MINOR}")

    # GObject Introspection support
    find_package(GObjectIntrospection REQUIRED)

    # We already had valac write a GIR, now we need to compile it to a
    # typelib.
    gobject_introspection_compile(
        "${CMAKE_CURRENT_BINARY_DIR}/${vala_GIR_NAME}.typelib"
        "${CMAKE_CURRENT_BINARY_DIR}/${vala_GIR_NAME}.gir")

    # Telling CMake you want to install a file doesn't actually get it to
    # *build* that file.  The workaround is to add a custom target which
    # is always built and depens on the file we want to install.
    add_custom_target(typelib ALL DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/${vala_GIR_NAME}.typelib")

    # Install our typelib
    install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${vala_GIR_NAME}.typelib"
        DESTINATION "${GI_TYPELIB_DIR}")

    # Install our GIR
    install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${vala_GIR_NAME}.gir"
        DESTINATION "${GI_REPOSITORY_DIR}")

    # Install our VAPI
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${vala_PKG_NAME}.vapi
        DESTINATION ${CMAKE_INSTALL_DATADIR}/vala/vapi)
  
    # Install library in lib/
    install(TARGETS ${vala_LIBRARY_NAME}
        EXPORT export_plplot
        ARCHIVE DESTINATION ${LIB_DIR}
        LIBRARY DESTINATION ${LIB_DIR}
        RUNTIME DESTINATION ${BIN_DIR}
    )

    # Configure pkg-config *.pc file corresponding to libplplotcxx
    pkg_config_file("vala" "vala" " Vala binding" "plplotvala" "" "-lplplot")

    # # Generate documentation
    # find_package(Valadoc)
    # if(${VALADOC_FOUND})
    #     valadoc_generate(html
    #         PACKAGE_NAME ${vala_PKG_NAME}
    #         PACKAGE_VERSION ${PLPLOT_VERSION}
    #         SOURCES ${vala_LIB_SRCS}
    #         PACKAGES ${vala_PACKAGES})
    #     valadoc_generate(devhelp
    #         DOCLET devhelp
    #         PACKAGE_NAME ${vala_PKG_NAME}
    #         PACKAGE_VERSION ${PLPLOT_VERSION}
    #         SOURCES ${vala_LIB_SRCS}
    #         PACKAGES ${vala_PACKAGES})

    #     install(DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/devhelp/${vala_PKG_NAME}"
    #         DESTINATION "${CMAKE_INSTALL_DATADIR}/devhelp/books")
    #     add_custom_target(doc ALL
    #         DEPENDS html devhelp)
    # endif()

endif(ENABLE_vala)
